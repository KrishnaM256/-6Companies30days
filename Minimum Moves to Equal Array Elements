class Solution {
    public int minMoves2(int[] nums) {
        Arrays.sort(nums);
        int mid = quickSelect(nums, 0, nums.length-1, nums.length/2);
        int ans=0;
        for(int i=0;i<nums.length;i++){
            ans+=Math.abs(mid-nums[i]);
        }
        return ans;
    }
    private int quickSelect(int[] nums,int left,int right, int k){
        if(left==right)return nums[left];
        int pIndex = nums.length/2;
        if(pIndex == k)return nums[k];
        else if(pIndex>k)return quickSelect(nums,left,pIndex-1,k);
        return quickSelect(nums,pIndex+1,right,k);
    }
    
    private int partition(int[] nums, int left, int right, int pIndex) {
        int pivot = nums[pIndex];
        swap(nums, pIndex, right);
        pIndex = left;

        for (int i=left; i<=right; i++) 
            if (nums[i] <= pivot) swap(nums, i, pIndex++);

        return pIndex - 1;
    }

    private void swap(int[] nums, int x, int y) {
        int temp = nums[x];
        nums[x] = nums[y];
        nums[y] = temp;
    }
}
