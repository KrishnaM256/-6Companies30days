class Solution {
    public int orangesRotting(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        Queue<int[]> q = new LinkedList<>();
        int[][] visited = grid;
        int nOfFresh = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(visited[i][j]==2){
                    q.offer(new int[]{i,j});
                }
                if(visited[i][j]==1){
                    nOfFresh++;
                }
            }
        }
        if(nOfFresh==0)return 0;
        if(q.isEmpty())return -1;
        int ans=-1;
        while(!q.isEmpty()){
            int size = q.size();
            while(size-->0){
                int[] arr = q.poll();
                int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};
                for(int[] dir:dirs){
                    int x = arr[0]+dir[0];
                    int y = arr[1]+dir[1];
                    if(x>=0&&x<m&&y>=0&&y<n&&visited[x][y]==1){
                        visited[x][y]=2;
                        q.offer(new int[]{x,y});
                        nOfFresh--;
                    }
                }
            }
            ans++;
        }
        if(nOfFresh==0)
        return ans;
        return -1;
    }
}
