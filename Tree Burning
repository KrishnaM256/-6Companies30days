/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int amountOfTime(TreeNode root, int start) {
        Map<Integer,List<Integer>> map = new HashMap<>();
        convertToGraph(root,0,map);
        Queue<Integer> q = new LinkedList<>();
        q.add(start);
        Set<Integer> visited= new HashSet<>();
        int minutes=0;
        visited.add(start);
        while(!q.isEmpty()){
            int size = q.size();
            for(int i=0;i<size;i++){
                int v = q.remove();
                for(int it:map.get(v)){
                    if(!visited.contains(it)){
                        visited.add(it);
                        q.add(it);
                    }
                }
            }
            minutes++;
        }
        return minutes-1;
    }
    private void convertToGraph(TreeNode root, int parent, Map<Integer,List<Integer>> map){
        if(root==null)return;
        List<Integer> list = new ArrayList<>();
        if(parent!=0)list.add(parent);
        if(root.left!=null)list.add(root.left.val);
        if(root.right!=null)list.add(root.right.val);
        map.put(root.val,list);
        convertToGraph(root.left,root.val,map);
        convertToGraph(root.right,root.val,map);
    }
}
